using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Scanner
{
    public partial class Form1 : Form
    {
        public enum Type {

            IDENTIFIER,
            CONST_INT, CONST_FLOAT,//Целые числа и числа с плавающей запятой
            CONST_CHAR, CONST_STRING,//Символьные и строковые константы
            ADD, SUB, MULTIPLY, DEVIDE, MOD,// + - * / % 
            INC, DEC,// ++ --
            ASSIGN,// =
            ADDEQ, SUBEQ, MULTIPLYEQ, DEVIDEEQ, MODEQ,// += -= *= /= %=
            GT, LT, EQ, GET, LET,// > < == >= <= 
            AND_BIT, OR_BIT, NOT_BIT,// & | ^
            PARENTHESIS_R, PARENTHESIS_L, BRACKET_R, BRACKET_L, BRACES_R, BRACES_L,// ( ) [ ] { }
            AND_LOGICAL, OR_LOGICAL, NOT_LOGICAL,// && || !
            COMMA, DOT,COLON, SEMICOLON, QUESTION// , . : ; ?

        };

        //Структура хранения данных
        public struct Data
        {
            public Type code;
            public string value;
            public Data(Type code, string value)
            {
                this.code = code;
                this.value = value;
            }
        }

        //Список отсканированных слов
        public Queue<Data> token = new Queue<Data>();

        public Form1()
        {
            InitializeComponent();
        }

        private void btnScanner_Click(object sender, EventArgs e)
        {
            if (txbInput.Text.Equals(string.Empty))
            {
                return;
            }
            //Обход по строкам для удобного пропуска комментариев
            string[] lines = txbInput.Text.Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            string keyword = string.Empty;    //
            int status = 0;//Распознанная строка символов
            int length = 0;
            char current;
            int i = 0;
            foreach(string line in lines)
            {
                length = line.Length;
                for(i = 0; i < length; i++)
                {
                    current = line[i];
                    switch (status)
                    {
                        case 0:
                            status = currentStatus0(ref keyword, current);
                            break;
                        case 1:
                            status = currentStatus1(ref keyword, current, ref i);
                            break;
                        case 2:
                            status = currentStatus2(ref keyword, current, ref i);
                            break;
                        case 3:
                            status = currentStatus3(ref keyword, current, ref i);
                            break;
                        case 4:
                            status = currentStatus4(ref keyword, current, ref i);
                            break;
                        case 5:
                            status = currentStatus5(ref keyword, current, ref i);
                            break;
                        case 6:
                            status = currentStatus6(ref keyword, current);
                            break;
                        case 7:
                            status = currentStatus7(ref keyword, current, ref i);             
                            break;
                        case 8:
                            status = currentStatus8(ref keyword, current, ref i);
                            break;
                        case 9:
                            status = currentStatus9(ref keyword, current, ref i);
                            break;
                        default:
                            break;
                    }
                }
                //一Конец сопоставления строк
                if (!keyword.Equals(string.Empty))
                {
                    status = endOfLine(status, ref keyword);
                }
            }

            showResult();
        }

        private int currentStatus0(ref string keyword, char current)
        {
            int status = 0;
            //Буквы или символы подчеркивания
            if ((current >= 'a' && current <= 'z') || (current >= 'A' && current <= 'Z') || current == '_')
            {
                status = 1;
            }
            //Номер
            else if (current >= '0' && current <= '9')
            {
                status = 2;
            }
            else if (current == '+')
            {
                status = 4;
            }
            else if (current == '-')
            {
                status = 5;
            }
            else if (current == '*')
            {
                status = 6;
                keyword += current;
            }
            else if (current == '/')
            {
                status = 7;
            }
            else if (current == '>')
            {
                status = 10;
            }
            else if (current == '<')
            {
                status = 11;
            }
            else if (current == '=')
            {
                status = 12;
            }
            else if ("()[]{}.,;?:".ToCharArray().Contains<char>(current))
            {
                Type type = new Type();
                switch (current)
                {
                    case '(':
                        type = Type.PARENTHESIS_L;
                        break;
                    case ')':
                        type = Type.PARENTHESIS_R;
                        break;
                    case '[':
                        type = Type.BRACKET_L;
                        break;
                    case ']':
                        type = Type.BRACKET_R;
                        break;
                    case '{':
                        type = Type.BRACES_L;
                        break;
                    case '}':
                        type = Type.BRACES_R;
                        break;
                    case '.':
                        type = Type.DOT;
                        break;
                    case ',':
                        type = Type.COMMA;
                        break;
                    case ';':
                        type = Type.SEMICOLON;
                        break;
                    case '?':
                        type = Type.QUESTION;
                        break;
                    case ':':
                        type = Type.COLON;
                        break;
                }
                token.Enqueue(new Data(type, current.ToString()));
                return 0;
            }
            //Игнорирование других символов
            else
            {
                return status;
            }
            keyword += current;
            return status;
        }

        private int currentStatus1(ref string keyword, char current, ref int i)
        {
            int status = 1;

            if ((current >= 'a' && current <= 'z') || (current >= 'A' && current <= 'Z') ||
                (current >= '0' && current <= '9') || current == '_')
            {
                keyword += current;
            }
            else
            {
                //Идентификатор
                {
                    token.Enqueue(new Data(Type.IDENTIFIER, keyword));
                }
                keyword = string.Empty;
                i--;
                status = 0;
            }
            return status;
        }

        private int currentStatus2(ref string keyword, char current, ref int i)
        {
            int status = 2;
            //Числа
            if (current >= '0' && current <= '9')
            {
                keyword += current;
            }
            //Точка
            else if (current == '.')
            {
                status = 3;
                keyword += current;
            }
            //Конец целочисленного совпадения
            else
            {
                token.Enqueue(new Data(Type.CONST_INT, keyword));
                keyword = string.Empty;
                status = 0;
                i--;
            }
            return status;
        }

        private int currentStatus3(ref string keyword, char current, ref int i)
        {
            int status = 3;
            if (current >= '0' && current <= '9')
            {
                keyword += current;
            }
            //Конец десятичного числа
            else
            {
                token.Enqueue(new Data(Type.CONST_FLOAT, keyword));
                keyword = string.Empty;
                status = 0;
                i--;
            }
            return status;
        }

        private int currentStatus4(ref string keyword, char current, ref int i)
        {
            //++
            if (current == '+')
            {
                token.Enqueue(new Data(Type.INC, keyword + current));
            }
            //+=
            else if (current == '=')
            {
                token.Enqueue(new Data(Type.ADDEQ, keyword + current));

            }
            //+
            else
            {
                token.Enqueue(new Data(Type.ADD, keyword));
                i--;
            }
            keyword = string.Empty;
            return 0;
        }

        private int currentStatus5(ref string keyword, char current, ref int i)
        {
            //--
            if (current == '-')
            {
                token.Enqueue(new Data(Type.DEC, keyword + current));
            }
            //-=
            else if (current == '=')
            {
                token.Enqueue(new Data(Type.SUBEQ, keyword + current));

            }
            //-
            else
            {
                token.Enqueue(new Data(Type.SUB, keyword));
                i--;
            }
            keyword = string.Empty;
            return 0;
        }

        private int currentStatus6(ref string keyword, char current)
        {
            int status = 8;
            if (current == '*')
            {
                keyword += current;
                status = 9;
            }
            return status;
        }

        private int currentStatus7(ref string keyword, char current, ref int i)
        {
            // >=
            if (current == '=')
            {
                token.Enqueue(new Data(Type.GET, keyword + current));
            }
            // >
            else
            {
                token.Enqueue(new Data(Type.GT, keyword));
                i--;
            }
            keyword = string.Empty;
            return 0;
        }

        private int currentStatus8(ref string keyword, char current, ref int i)
        {
            // <=
            if (current == '=')
            {
                token.Enqueue(new Data(Type.LET, keyword + current));
            }
            // <
            else
            {
                token.Enqueue(new Data(Type.LT, keyword));
                i--;
            }
            keyword = string.Empty;
            return 0;
        }

        private int currentStatus9(ref string keyword, char current, ref int i)
        {
            // ==
            if (current == '=')
            {
                token.Enqueue(new Data(Type.EQ, keyword + current));
            }
            // =
            else
            {
                token.Enqueue(new Data(Type.ASSIGN, keyword));
                i--;
            }
            keyword = string.Empty;
            return 0;
        }

        private int endOfLine(int status, ref string keyword)
        {
            if (status == 9 || status == 8)
            {
                return 8;
            }
            Type type = new Type();
            switch (status)
            {
                case 1:
                    type = Type.IDENTIFIER;
                    break;
                case 2:
                    type = Type.CONST_INT;
                    break;
                case 3:
                    type = Type.CONST_FLOAT;
                    break;
                case 4:
                    type = Type.ADD;
                    break;
                case 5:
                    type = Type.SUB;
                    break;
                case 6:
                    type = Type.MULTIPLY;
                    break;
                case 7:
                    type = Type.DEVIDE;
                    break;
                case 10:
                    type = Type.GT;
                    break;
                case 11:
                    type = Type.LT;
                    break;
                case 12:
                    type = Type.EQ;
                    break;
                default:
                    break;
            }
            token.Enqueue(new Data(type, keyword));
            keyword = string.Empty;
            return 0;
        }

        private void showResult()
        {
            txbOutput.Text = string.Empty;

            Data data;
            while(token.Count > 0)
            {
                data = token.Dequeue();
                txbOutput.Text += data.value + "," + (int)data.code + "\r\n";
            }
            return;
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}
